from google.colab import drive
drive.mount('/content/drive')

# Clone YOLOv5 repository
!git clone https://github.com/ultralytics/yolov5.git
%cd yolov5
!pip install -r requirements.txt  # Install YOLOv5 dependencies

import json
import os
from pathlib import Path
import numpy as np
from PIL import Image
from tqdm import tqdm
from ultralytics.utils.ops import xyxy2xywhn

def convert_labels(geojson_file, image_folder, output_label_folder):
    with open(geojson_file) as f:
        print(f'Loading {geojson_file}...')
        data = json.load(f)

    os.makedirs(output_label_folder, exist_ok=True)

    # Mapping xView class IDs to YOLO class indexes
    xview_class2index = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, -1, 3, -1, 4, 5, 6, 7, 8, -1, 9, 10,
                         11, 12, 13, 14, 15, -1, -1, 16, 17, 18, 19, 20, 21, 22, -1, 23, 24, 25, -1, 26, 27, -1,
                         28, -1, 29, 30, 31, 32, 33, 34, 35, 36, 37, -1, 38, 39, 40, 41, 42, 43, 44, 45, -1, -1,
                         -1, -1, 46, 47, 48, 49, -1, 50, 51, -1, 52, -1, -1, -1, 53, 54, -1, 55, -1, -1, 56, -1,
                         57, -1, 58, 59]

    shapes = {}
    label_count = 0
    for feature in tqdm(data['features'], desc='Converting labels'):
        p = feature['properties']
        if p['bounds_imcoords']:
            img_id = p['image_id']
            img_path = Path(image_folder) / img_id
            if img_path.exists():  # Ensure the image exists
                try:
                    # Process bounding box
                    box = np.array([int(num) for num in p['bounds_imcoords'].split(",")])
                    if box.shape[0] != 4:
                        print(f"Skipping malformed box for {img_id}: {box}")
                        continue

                    # Process class ID
                    cls = p['type_id']
                    cls = xview_class2index[int(cls)]
                    if not (0 <= cls <= 59):
                        print(f"Skipping invalid class {cls} for {img_id}")
                        continue

                    # Convert and write label
                    if img_id not in shapes:
                        shapes[img_id] = Image.open(img_path).size
                    box = xyxy2xywhn(box[None].astype(np.float32), w=shapes[img_id][0], h=shapes[img_id][1], clip=True)
                    label_path = Path(output_label_folder) / f"{img_id.split('.')[0]}.txt"
                    with open(label_path, 'a') as f:
                        f.write(f"{cls} {' '.join(f'{x:.6f}' for x in box[0])}\n")
                    label_count += 1
                except Exception as e:
                    print(f'Error processing {img_id}: {e}')
            else:
                print(f"Image {img_id} not found in {image_folder}")

    print(f"Conversion completed: {label_count} labels created in {output_label_folder}")

# Define paths
geojson_file = '/content/drive/MyDrive/xview/xView_train.geojson'
train_images_folder = '/content/drive/MyDrive/xview/train_images'
output_labels_folder = '/content/drive/MyDrive/xview/labels/train'

# Convert labels
convert_labels(geojson_file, train_images_folder, output_labels_folder)

train: /path/to/yolo/formatted_data/images/train  # Path to train images
val: /path/to/yolo/formatted_data/images/val      # Path to validation images

nc: 4  # Number of classes (tank, ammunition, building, person)
names: ['tank', 'ammunition', 'building', 'person']

# Train YOLOv5 on xView data
!python train.py --img 640 --batch 16 --epochs 50 --data /content/drive/MyDrive/xview (1)/xView.yaml.yaml --weights yolov5s.pt
